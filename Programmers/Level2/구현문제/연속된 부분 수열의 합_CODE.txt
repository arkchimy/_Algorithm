문제  : https://school.programmers.co.kr/learn/courses/30/lessons/178870

요약 : 데이터개수가 1,000,000 의 경우 O(N^2) 로직을 세울 경우 시간초과가 우려된다.
해결 : 위 문제에서는 투 포인터 알고리즘으로 두개의 iterator를 이용하여  O(N)로직을 완성했다.
유의점 : end 를 나타내는 iterator 가 v.end()를 가리킬 상황을 고려하여 구현해야한다. 
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

bool comp(const pair<int,int> a,const pair<int,int> b)
{
    if(a.second == b.second)
        return a.first < b.first;
    return a.second < b.second;
}
vector<int> solution(vector<int> v, int target) 
{
    vector<int> answer;
    vector<int>::iterator iter= v.begin(), iter2;
    
    vector<pair<int,int>> p; // first == start_idx , second == length
    iter2 =  iter;
    int sum = *iter;
    while(1)
    {
        if(sum == target)
        {
            int start = distance(v.begin(),iter);
            int size = distance(iter,iter2);
            if(iter2 ==  v.end())
                size = distance(iter,v.end() - 1);
            p.push_back({start,size});
        }
        if((sum >= target && iter < iter2) || iter2 == v.end()) // iter2가 끝에 도달하면 더 이상 뒤로 못 물러남
        {
            sum -= *iter;
            iter++;
        }
        else
        {
            iter2++;
            sum += *iter2;
        }
        if(iter == v.end())
            break;
    }
    
    sort(p.begin(),p.end(),comp); //size를 기준으로 오름차순
    answer.push_back(p[0].first);
    answer.push_back(p[0].first + p[0].second);
    
    return answer;
}