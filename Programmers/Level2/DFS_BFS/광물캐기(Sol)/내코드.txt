#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <algorithm>

using namespace std;

deque<int> answer;

int costs[3][3] = {{1,1,1},{5,1,1},{25,5,1}};
void DFS(int pos, vector<int> pick, queue<int> q,vector<bool> visited, int cnt)
{

    visited[pos] = true;
    for(int i =0; i < 5 ; i ++)
    {
        if(q.empty()) // q가 비었다면 끝내기
            break;
        int front = q.front();
        q.pop();
        cnt += costs[pick[pos]][front];
    }
    if(answer.size() > 0)
    {
        if(cnt >= answer[0])
            return;
    }
    if(q.empty()) //전부 캣다면
    {
        answer.push_front(cnt);
        return;
    }
    bool end_chk = true;
    for(int i = 0; i < visited.size(); i++)
        if(!visited[i]) end_chk = false;
    if(end_chk)
    {
        answer.push_front(cnt);
        return;
    }
    for(int i =0; i < visited.size(); i++)
    {
        if(!visited[i])
        {
            DFS(i,pick,q,visited,cnt);
        }
    }

}
int solution(vector<int> picks, vector<string> minerals) 
{

    vector<int> pick;
    queue<int> mineral;
    for(int i =0; i < picks.size(); i++)
    {
        for(int k = 0; k < picks[i]; k++)
            pick.push_back(i);
    }

    for(int i =0; i < minerals.size(); i++)
    {
        if(minerals[i].compare("diamond") == 0 )
            mineral.push(0);
        else if(minerals[i].compare("iron") == 0 )
            mineral.push(1);
        else if(minerals[i].compare("stone") == 0 )
            mineral.push(2);
    }
    int size = pick.size();
    vector<bool> visited(size,false);
    vector<int> arr;
    for(int i =0; i < 3; i ++)
    {
        vector<int>::iterator iter = lower_bound(pick.begin(),pick.end(),i);
        if(iter != pick.end())
            arr.push_back(distance(pick.begin(),iter));
    }
    for(int i =0; i < arr.size(); i ++)
    {

       DFS(arr[i],pick,mineral,visited,0);
    }


    return answer[0];
}